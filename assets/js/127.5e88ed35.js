(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{407:function(v,_,t){"use strict";t.r(_);var s=t(14),i=Object(s.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"_3-1-linux-内核-vs-windows-内核"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-linux-内核-vs-windows-内核"}},[v._v("#")]),v._v(" 3.1 Linux 内核 vs Windows 内核")]),v._v(" "),_("p",[v._v("Windows 和 Linux 可以说是我们比较常见的两款操作系统的。")]),v._v(" "),_("p",[v._v("Windows 基本占领了电脑时代的市场，商业上取得了很大成就，但是它并不开源，所以要想接触源码得加入 Windows 的开发团队中。")]),v._v(" "),_("p",[v._v("对于服务器使用的操作系统基本上都是 Linux，而且内核源码也是开源的，任何人都可以下载，并增加自己的改动或功能，Linux 最大的魅力在于，全世界有非常多的技术大佬为它贡献代码。")]),v._v(" "),_("p",[v._v("这两个操作系统各有千秋，不分伯仲。")]),v._v(" "),_("p",[v._v("操作系统核心的东西就是内核，这次我们就来看看，"),_("strong",[v._v("Linux 内核和 Windows 内核有什么区别？")])]),v._v(" "),_("hr"),v._v(" "),_("h2",{attrs:{id:"内核"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#内核"}},[v._v("#")]),v._v(" 内核")]),v._v(" "),_("p",[v._v("什么是内核呢？")]),v._v(" "),_("p",[v._v("计算机是由各种外部硬件设备组成的，比如内存、cpu、硬盘等，如果每个应用都要和这些硬件设备对接通信协议，那这样太累了，所以这个中间人就由内核来负责，"),_("strong",[v._v("让内核作为应用连接硬件设备的桥梁")]),v._v("，应用程序只需关心与内核交互，不用关心硬件的细节。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/xiaolincoder/ImageHost4@main/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E6%A0%B8/Kernel_Layout.png",alt:"内核"}})]),v._v(" "),_("p",[v._v("内核有哪些能力呢？")]),v._v(" "),_("p",[v._v("现代操作系统，内核一般会提供 4 个基本能力：")]),v._v(" "),_("ul",[_("li",[v._v("管理进程、线程，决定哪个进程、线程使用 CPU，也就是进程调度的能力；")]),v._v(" "),_("li",[v._v("管理内存，决定内存的分配和回收，也就是内存管理的能力；")]),v._v(" "),_("li",[v._v("管理硬件设备，为进程与硬件设备之间提供通信能力，也就是硬件通信能力；")]),v._v(" "),_("li",[v._v("提供系统调用，如果应用程序要运行更高权限运行的服务，那么就需要有系统调用，它是用户程序与操作系统之间的接口。")])]),v._v(" "),_("p",[v._v("内核是怎么工作的？")]),v._v(" "),_("p",[v._v("内核具有很高的权限，可以控制 cpu、内存、硬盘等硬件，而应用程序具有的权限很小，因此大多数操作系统，把内存分成了两个区域：")]),v._v(" "),_("ul",[_("li",[v._v("内核空间，这个内存空间只有内核程序可以访问；")]),v._v(" "),_("li",[v._v("用户空间，这个内存空间专门给应用程序使用；")])]),v._v(" "),_("p",[v._v("用户空间的代码只能访问一个局部的内存空间，而内核空间的代码可以访问所有内存空间。因此，当程序使用用户空间时，我们常说该程序在"),_("strong",[v._v("用户态")]),v._v("执行，而当程序使内核空间时，程序则在"),_("strong",[v._v("内核态")]),v._v("执行。")]),v._v(" "),_("p",[v._v("应用程序如果需要进入内核空间，就需要通过系统调用，下面来看看系统调用的过程：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/xiaolincoder/ImageHost4@main/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E6%A0%B8/systemcall.png",alt:""}})]),v._v(" "),_("p",[v._v("内核程序执行在内核态，用户程序执行在用户态。当应用程序使用系统调用时，会产生一个中断。发生中断后，CPU 会中断当前在执行的用户程序，转而跳转到中断处理程序，也就是开始执行内核程序。内核处理完后，主动触发中断，把 CPU 执行权限交回给用户程序，回到用户态继续工作。")]),v._v(" "),_("hr"),v._v(" "),_("h2",{attrs:{id:"linux-的设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#linux-的设计"}},[v._v("#")]),v._v(" Linux 的设计")]),v._v(" "),_("p",[v._v("Linux 的开山始祖是来自一位名叫 Linus Torvalds 的芬兰小伙子，他在 1991 年用 C 语言写出了第一版的 Linux 操作系统，那年他 22 岁。")]),v._v(" "),_("p",[v._v("完成第一版 Linux 后，Linux Torvalds 就在网络上发布了 Linux 内核的源代码，每个人都可以免费下载和使用。")]),v._v(" "),_("p",[v._v("Linux 内核设计的理念主要有这几个点：")]),v._v(" "),_("ul",[_("li",[_("em",[v._v("MultiTask")]),v._v("，多任务")]),v._v(" "),_("li",[_("em",[v._v("SMP")]),v._v("，对称多处理")]),v._v(" "),_("li",[_("em",[v._v("ELF")]),v._v("，可执行文件链接格式")]),v._v(" "),_("li",[_("em",[v._v("Monolithic Kernel")]),v._v("，宏内核")])]),v._v(" "),_("h4",{attrs:{id:"multitask"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#multitask"}},[v._v("#")]),v._v(" MultiTask")]),v._v(" "),_("p",[v._v("MultiTask 的意思是"),_("strong",[v._v("多任务")]),v._v("，代表着 Linux 是一个多任务的操作系统。")]),v._v(" "),_("p",[v._v("多任务意味着可以有多个任务同时执行，这里的「同时」可以是并发或并行：")]),v._v(" "),_("ul",[_("li",[v._v("对于单核 CPU 时，可以让每个任务执行一小段时间，时间到就切换另外一个任务，从宏观角度看，一段时间内执行了多个任务，这被称为并发。")]),v._v(" "),_("li",[v._v("对于多核 CPU 时，多个任务可以同时被不同核心的 CPU 同时执行，这被称为并行。")])]),v._v(" "),_("h3",{attrs:{id:"smp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#smp"}},[v._v("#")]),v._v(" SMP")]),v._v(" "),_("p",[v._v("SMP 的意思是"),_("strong",[v._v("对称多处理")]),v._v("，代表着每个 CPU 的地位是相等的，对资源的使用权限也是相同的，多个 CPU 共享同一个内存，每个 CPU 都可以访问完整的内存和硬件资源。")]),v._v(" "),_("p",[v._v("这个特点决定了 Linux 操作系统不会有某个 CPU 单独服务应用程序或内核程序，而是每个程序都可以被分配到任意一个 CPU 上被执行。")]),v._v(" "),_("h3",{attrs:{id:"elf"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#elf"}},[v._v("#")]),v._v(" ELF")]),v._v(" "),_("p",[v._v("ELF 的意思是"),_("strong",[v._v("可执行文件链接格式")]),v._v("，它是 Linux 操作系统中可执行文件的存储格式，你可以从下图看到它的结构：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/xiaolincoder/ImageHost4@main/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E6%A0%B8/Elf.png",alt:"ELF 文件格式"}})]),v._v(" "),_("p",[v._v("ELF 把文件分成了一个个分段，每一个段都有自己的作用，具体每个段的作用这里我就不详细说明了，感兴趣的同学可以去看《程序员的自我修养——链接、装载和库》这本书。")]),v._v(" "),_("p",[v._v("另外，ELF 文件有两种索引，Program header table 中记录了「运行时」所需的段，而 Section header table 记录了二进制文件中各个「段的首地址」。")]),v._v(" "),_("p",[v._v("那 ELF 文件怎么生成的呢？")]),v._v(" "),_("p",[v._v("我们编写的代码，首先通过「编译器」编译成汇编代码，接着通过「汇编器」变成目标代码，也就是目标文件，最后通过「链接器」把多个目标文件以及调用的各种函数库链接起来，形成一个可执行文件，也就是 ELF 文件。")]),v._v(" "),_("p",[v._v("那 ELF 文件是怎么被执行的呢？")]),v._v(" "),_("p",[v._v("执行 ELF 文件的时候，会通过「装载器」把 ELF 文件装载到内存里，CPU 读取内存中的指令和数据，于是程序就被执行起来了。")]),v._v(" "),_("h3",{attrs:{id:"monolithic-kernel"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#monolithic-kernel"}},[v._v("#")]),v._v(" Monolithic Kernel")]),v._v(" "),_("p",[v._v("Monolithic Kernel 的意思是"),_("strong",[v._v("宏内核")]),v._v("，Linux 内核架构就是宏内核，意味着 Linux 的内核是一个完整的可执行程序，且拥有最高的权限。")]),v._v(" "),_("p",[v._v("宏内核的特征是系统内核的所有模块，比如进程调度、内存管理、文件系统、设备驱动等，都运行在内核态。")]),v._v(" "),_("p",[v._v("不过，Linux 也实现了动态加载内核模块的功能，例如大部分设备驱动是以可加载模块的形式存在的，与内核其他模块解耦，让驱动开发和驱动加载更为方便、灵活。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/xiaolincoder/ImageHost4@main/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E6%A0%B8/OS-structure2.png",alt:"分别为宏内核、微内核、混合内核的操作系统结构"}})]),v._v(" "),_("p",[v._v("与宏内核相反的是"),_("strong",[v._v("微内核")]),v._v("，微内核架构的内核只保留最基本的能力，比如进程调度、虚拟机内存、中断等，把一些应用放到了用户空间，比如驱动程序、文件系统等。这样服务与服务之间是隔离的，单个服务出现故障或者完全攻击，也不会导致整个操作系统挂掉，提高了操作系统的稳定性和可靠性。")]),v._v(" "),_("p",[v._v("微内核内核功能少，可移植性高，相比宏内核有一点不好的地方在于，由于驱动程序不在内核中，而且驱动程序一般会频繁调用底层能力的，于是驱动和硬件设备交互就需要频繁切换到内核态，这样会带来性能损耗。华为的鸿蒙操作系统的内核架构就是微内核。")]),v._v(" "),_("p",[v._v("还有一种内核叫"),_("strong",[v._v("混合类型内核")]),v._v("，它的架构有点像微内核，内核里面会有一个最小版本的内核，然后其他模块会在这个基础上搭建，然后实现的时候会跟宏内核类似，也就是把整个内核做成一个完整的程序，大部分服务都在内核中，这就像是宏内核的方式包裹着一个微内核。")]),v._v(" "),_("hr"),v._v(" "),_("h2",{attrs:{id:"windows-设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#windows-设计"}},[v._v("#")]),v._v(" Windows 设计")]),v._v(" "),_("p",[v._v("当今 Windows 7、Windows 10 使用的内核叫 Windows NT，NT 全称叫 New Technology。")]),v._v(" "),_("p",[v._v("下图是 Windows NT 的结构图片：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/xiaolincoder/ImageHost4@main/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E6%A0%B8/windowNT.png",alt:"Windows NT 的结构"}})]),v._v(" "),_("p",[v._v("Windows 和 Linux 一样，同样支持 MutiTask 和 SMP，但不同的是，"),_("strong",[v._v("Window 的内核设计是混合型内核")]),v._v("，在上图你可以看到内核中有一个 "),_("em",[v._v("MicroKernel")]),v._v(" 模块，这个就是最小版本的内核，而整个内核实现是一个完整的程序，含有非常多模块。")]),v._v(" "),_("p",[v._v("Windows 的可执行文件的格式与 Linux 也不同，所以这两个系统的可执行文件是不可以在对方上运行的。")]),v._v(" "),_("p",[v._v("Windows 的可执行文件格式叫 PE，称为"),_("strong",[v._v("可移植执行文件")]),v._v("，扩展名通常是"),_("code",[v._v(".exe")]),v._v("、"),_("code",[v._v(".dll")]),v._v("、"),_("code",[v._v(".sys")]),v._v("等。")]),v._v(" "),_("p",[v._v("PE 的结构你可以从下图中看到，它与 ELF 结构有一点相似。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/xiaolincoder/ImageHost4@main/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E6%A0%B8/pe.png",alt:"PE 文件结构"}})]),v._v(" "),_("hr"),v._v(" "),_("h2",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),_("p",[v._v("对于内核的架构一般有这三种类型：")]),v._v(" "),_("ul",[_("li",[v._v("宏内核，包含多个模块，整个内核像一个完整的程序；")]),v._v(" "),_("li",[v._v("微内核，有一个最小版本的内核，一些模块和服务则由用户态管理；")]),v._v(" "),_("li",[v._v("混合内核，是宏内核和微内核的结合体，内核中抽象出了微内核的概念，也就是内核中会有一个小型的内核，其他模块就在这个基础上搭建，整个内核是个完整的程序；")])]),v._v(" "),_("p",[v._v("Linux 的内核设计是采用了宏内核，Window 的内核设计则是采用了混合内核。")]),v._v(" "),_("p",[v._v("这两个操作系统的可执行文件格式也不一样，Linux 可执行文件格式叫作 ELF，Windows 可执行文件格式叫作 PE。")]),v._v(" "),_("hr"),v._v(" "),_("h2",{attrs:{id:"关注作者"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#关注作者"}},[v._v("#")]),v._v(" 关注作者")]),v._v(" "),_("p",[_("em",[_("strong",[v._v("哈喽，我是小林，就爱图解计算机基础，如果觉得文章对你有帮助，欢迎微信搜索「小林 coding」，关注后，回复「网络」再送你图解网络 PDF")])])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/xiaolincoder/ImageHost3@main/%E5%85%B6%E4%BB%96/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BB%8B%E7%BB%8D.png",alt:""}})])])}),[],!1,null,null,null);_.default=i.exports}}]);